   1 #! /usr/bin/env python
   2 #  -*- coding: utf-8 -*-
   3 #
   4 # GUI module generated by PAGE version 4.24.1
   5 #  in conjunction with Tcl version 8.6
   6 #    Jul 10, 2019 02:23:03 PM CEST  platform: Windows NT
   7 
   #%%
   
   8 import sys
   9 
  10 try:
  11     import Tkinter as tk
  12 except ImportError:
  13     import tkinter as tk
  14 
  15 try:
  16     import ttk
  17     py3 = False
  18 except ImportError:
  19     import tkinter.ttk as ttk
  20     py3 = True
  21 
  22 import etasys_prod_gui_support
  23 import os.path
  24 
  25 def vp_start_gui():
  26     '''Starting point when module is the main routine.'''
  27     global val, w, root
  28     global prog_location
  29     prog_call = sys.argv[0]
  30     prog_location = os.path.split(prog_call)[0]
  31     root = tk.Tk()
  32     etasys_prod_gui_support.set_Tk_var()
  33     top = Toplevel1 (root)
  34     etasys_prod_gui_support.init(root, top)
  35     root.mainloop()
  36 
  37 w = None
  38 def create_Toplevel1(root, *args, **kwargs):
  39     '''Starting point when module is imported by another program.'''
  40     global w, w_win, rt
  41     global prog_location
  42     prog_call = sys.argv[0]
  43     prog_location = os.path.split(prog_call)[0]
  44     rt = root
  45     w = tk.Toplevel (root)
  46     etasys_prod_gui_support.set_Tk_var()
  47     top = Toplevel1 (w)
  48     etasys_prod_gui_support.init(w, top, *args, **kwargs)
  49     return (w, top)
  50 
  51 def destroy_Toplevel1():
  52     global w
  53     w.destroy()
  54     w = None
  55 
  56 class Toplevel1:
  57     def __init__(self, top=None):
  58         '''This class configures and populates the toplevel window.
  59            top is the toplevel containing window.'''
  60         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
  61         _fgcolor = '#000000'  # X11 color: 'black'
  62         _compcolor = '#d9d9d9' # X11 color: 'gray85'
  63         _ana1color = '#d9d9d9' # X11 color: 'gray85'
  64         _ana2color = '#ececec' # Closest X11 color: 'gray92'
  65         font9 = "-family {Segoe UI} -size 10 -weight bold -slant roman"  \
  66             " -underline 0 -overstrike 0"
  67         self.style = ttk.Style()
  68         if sys.platform == "win32":
  69             self.style.theme_use('winnative')
  70         self.style.configure('.',background=_bgcolor)
  71         self.style.configure('.',foreground=_fgcolor)
  72         self.style.configure('.',font="TkDefaultFont")
  73         self.style.map('.',background=
  74             [('selected', _compcolor), ('active',_ana2color)])
  75 
  76         top.geometry("952x675+802+400")
  77         top.title("New Toplevel")
  78         top.configure(background="#d9d9d9")
  79 
  80         self.f_title = ttk.Frame(top)
  81         self.f_title.place(relx=0.231, rely=0.015, relheight=0.081
  82                 , relwidth=0.762)
  83         self.f_title.configure(relief='groove')
  84         self.f_title.configure(borderwidth="2")
  85         self.f_title.configure(relief="groove")
  86         self.f_title.configure(width=725)
  87 
  88         self.lb_Title = tk.Label(self.f_title)
  89         self.lb_Title.place(relx=0.014, rely=0.182, height=34, width=196)
  90         self.lb_Title.configure(background="#d9d9d9")
  91         self.lb_Title.configure(disabledforeground="#a3a3a3")
  92         self.lb_Title.configure(font=font9)
  93         self.lb_Title.configure(foreground="#000000")
  94         self.lb_Title.configure(text='''Prod Testbench''')
  95         self.lb_Title.configure(width=196)
  96 
  97         self.lb_Version = tk.Label(self.f_title)
  98         self.lb_Version.place(relx=0.662, rely=0.182, height=31, width=63)
  99         self.lb_Version.configure(background="#d9d9d9")
 100         self.lb_Version.configure(disabledforeground="#a3a3a3")
 101         self.lb_Version.configure(foreground="#000000")
 102         self.lb_Version.configure(text='''version''')
 103 
 104         self.lb_Version_Nr = tk.Label(self.f_title)
 105         self.lb_Version_Nr.place(relx=0.924, rely=0.182, height=31, width=30)
 106         self.lb_Version_Nr.configure(background="#d9d9d9")
 107         self.lb_Version_Nr.configure(disabledforeground="#a3a3a3")
 108         self.lb_Version_Nr.configure(foreground="#000000")
 109         self.lb_Version_Nr.configure(text='''0.0''')
 110 
 111         self.Logo_ETA = tk.Label(top)
 112         self.Logo_ETA.place(relx=0.021, rely=0.015, height=164, width=164)
 113         self.Logo_ETA.configure(background="#d9d9d9")
 114         self.Logo_ETA.configure(disabledforeground="#a3a3a3")
 115         self.Logo_ETA.configure(foreground="#000000")
 116         photo_location = os.path.join(prog_location,"../../Users/simon/Downloads/workspace/SPYDER/FactoryReportTemplate/graphics/logo.png")
 117         global _img0
 118         _img0 = tk.PhotoImage(file=photo_location)
 119         self.Logo_ETA.configure(image=_img0)
 120         self.Logo_ETA.configure(text='''Label''')
 121         self.Logo_ETA.configure(width=164)
 122 
 123         self.f_settings = tk.Frame(top)
 124         self.f_settings.place(relx=0.231, rely=0.119, relheight=0.556
 125                 , relwidth=0.756)
 126         self.f_settings.configure(relief='groove')
 127         self.f_settings.configure(borderwidth="2")
 128         self.f_settings.configure(relief="groove")
 129         self.f_settings.configure(background="#d9d9d9")
 130         self.f_settings.configure(width=725)
 131 
 132         self.Label2 = tk.Label(self.f_settings)
 133         self.Label2.place(relx=0.111, rely=1.04, height=31, width=101)
 134         self.Label2.configure(activebackground="#f9f9f9")
 135         self.Label2.configure(activeforeground="black")
 136         self.Label2.configure(background="#d9d9d9")
 137         self.Label2.configure(disabledforeground="#a3a3a3")
 138         self.Label2.configure(foreground="#000000")
 139         self.Label2.configure(highlightbackground="#d9d9d9")
 140         self.Label2.configure(highlightcolor="black")
 141         self.Label2.configure(text='''PCB Version''')
 142 
 143         self.Label2_1 = tk.Label(self.f_settings)
 144         self.Label2_1.place(relx=0.125, rely=1.04, height=31, width=101)
 145         self.Label2_1.configure(activebackground="#f9f9f9")
 146         self.Label2_1.configure(activeforeground="black")
 147         self.Label2_1.configure(background="#d9d9d9")
 148         self.Label2_1.configure(disabledforeground="#a3a3a3")
 149         self.Label2_1.configure(foreground="#000000")
 150         self.Label2_1.configure(highlightbackground="#d9d9d9")
 151         self.Label2_1.configure(highlightcolor="black")
 152         self.Label2_1.configure(text='''PCB Version''')
 153 
 154         self.tf_PCB_Version = tk.Text(self.f_settings)
 155         self.tf_PCB_Version.place(relx=0.167, rely=0.027, relheight=0.091
 156                 , relwidth=0.353)
 157         self.tf_PCB_Version.configure(background="white")
 158         self.tf_PCB_Version.configure(font="TkTextFont")
 159         self.tf_PCB_Version.configure(foreground="black")
 160         self.tf_PCB_Version.configure(highlightbackground="#d9d9d9")
 161         self.tf_PCB_Version.configure(highlightcolor="black")
 162         self.tf_PCB_Version.configure(insertbackground="black")
 163         self.tf_PCB_Version.configure(selectbackground="#c4c4c4")
 164         self.tf_PCB_Version.configure(selectforeground="black")
 165         self.tf_PCB_Version.configure(width=254)
 166         self.tf_PCB_Version.configure(wrap="word")
 167         tooltip_font = "TkDefaultFont"
 168         ToolTip(self.tf_PCB_Version, tooltip_font, '''Versionsnummer des PCB''', delay=0.5)
 169 
 170         self.tf_Person = tk.Text(self.f_settings)
 171         self.tf_Person.place(relx=0.167, rely=0.133, relheight=0.091
 172                 , relwidth=0.353)
 173         self.tf_Person.configure(background="white")
 174         self.tf_Person.configure(font="TkTextFont")
 175         self.tf_Person.configure(foreground="black")
 176         self.tf_Person.configure(highlightbackground="#d9d9d9")
 177         self.tf_Person.configure(highlightcolor="black")
 178         self.tf_Person.configure(insertbackground="black")
 179         self.tf_Person.configure(selectbackground="#c4c4c4")
 180         self.tf_Person.configure(selectforeground="black")
 181         self.tf_Person.configure(width=254)
 182         self.tf_Person.configure(wrap="word")
 183 
 184         self.tc_Script_Select = ttk.Combobox(self.f_settings)
 185         self.tc_Script_Select.place(relx=0.222, rely=0.267, relheight=0.109
 186                 , relwidth=0.586)
 187         self.tc_Script_Select.configure(textvariable=etasys_prod_gui_support.combobox)
 188         self.tc_Script_Select.configure(width=422)
 189         self.tc_Script_Select.configure(takefocus="")
 190 
 191         self.bt_Script_Scan = tk.Button(self.f_settings)
 192         self.bt_Script_Scan.place(relx=0.819, rely=0.267, height=42, width=125)
 193         self.bt_Script_Scan.configure(activebackground="#ececec")
 194         self.bt_Script_Scan.configure(activeforeground="#000000")
 195         self.bt_Script_Scan.configure(background="#d9d9d9")
 196         self.bt_Script_Scan.configure(disabledforeground="#a3a3a3")
 197         self.bt_Script_Scan.configure(foreground="#000000")
 198         self.bt_Script_Scan.configure(highlightbackground="#d9d9d9")
 199         self.bt_Script_Scan.configure(highlightcolor="black")
 200         self.bt_Script_Scan.configure(pady="0")
 201         self.bt_Script_Scan.configure(text='''Aktualisieren''')
 202         self.bt_Script_Scan.configure(width=125)
 203 
 204         self.lb_PCB_Version = tk.Label(self.f_settings)
 205         self.lb_PCB_Version.place(relx=0.014, rely=0.027, height=31, width=101)
 206         self.lb_PCB_Version.configure(background="#d9d9d9")
 207         self.lb_PCB_Version.configure(disabledforeground="#a3a3a3")
 208         self.lb_PCB_Version.configure(foreground="#000000")
 209         self.lb_PCB_Version.configure(text='''PCB Version''')
 210 
 211         self.lb_Person = tk.Label(self.f_settings)
 212         self.lb_Person.place(relx=0.014, rely=0.133, height=31, width=60)
 213         self.lb_Person.configure(background="#d9d9d9")
 214         self.lb_Person.configure(disabledforeground="#a3a3a3")
 215         self.lb_Person.configure(foreground="#000000")
 216         self.lb_Person.configure(text='''Person''')
 217 
 218         self.lb_Script = tk.Label(self.f_settings)
 219         self.lb_Script.place(relx=0.014, rely=0.267, height=31, width=51)
 220         self.lb_Script.configure(background="#d9d9d9")
 221         self.lb_Script.configure(disabledforeground="#a3a3a3")
 222         self.lb_Script.configure(foreground="#000000")
 223         self.lb_Script.configure(text='''Script''')
 224 
 225         self.lb_OutFolder = tk.Label(self.f_settings)
 226         self.lb_OutFolder.place(relx=0.014, rely=0.4, height=31, width=129)
 227         self.lb_OutFolder.configure(background="#d9d9d9")
 228         self.lb_OutFolder.configure(disabledforeground="#a3a3a3")
 229         self.lb_OutFolder.configure(foreground="#000000")
 230         self.lb_OutFolder.configure(text='''Ausgabeordner''')
 231 
 232         self.style.configure('Treeview.Heading',  font="TkDefaultFont")
 233         self.sv_Params_List = ScrolledTreeView(self.f_settings)
 234         self.sv_Params_List.place(relx=0.222, rely=0.56, relheight=0.395
 235                 , relwidth=0.583)
 236         self.sv_Params_List.configure(columns="Col1")
 237         # build_treeview_support starting.
 238         self.sv_Params_List.heading("#0",text="Tree")
 239         self.sv_Params_List.heading("#0",anchor="center")
 240         self.sv_Params_List.column("#0",width="200")
 241         self.sv_Params_List.column("#0",minwidth="20")
 242         self.sv_Params_List.column("#0",stretch="1")
 243         self.sv_Params_List.column("#0",anchor="w")
 244         self.sv_Params_List.heading("Col1",text="Col1")
 245         self.sv_Params_List.heading("Col1",anchor="center")
 246         self.sv_Params_List.column("Col1",width="200")
 247         self.sv_Params_List.column("Col1",minwidth="20")
 248         self.sv_Params_List.column("Col1",stretch="1")
 249         self.sv_Params_List.column("Col1",anchor="w")
 250 
 251         self.lb_Parameter = tk.Label(self.f_settings)
 252         self.lb_Parameter.place(relx=0.014, rely=0.56, height=31, width=86)
 253         self.lb_Parameter.configure(background="#d9d9d9")
 254         self.lb_Parameter.configure(disabledforeground="#a3a3a3")
 255         self.lb_Parameter.configure(foreground="#000000")
 256         self.lb_Parameter.configure(text='''Parameter''')
 257 
 258         self.bt_Params_Apply = tk.Button(self.f_settings)
 259         self.bt_Params_Apply.place(relx=0.819, rely=0.827, height=42, width=118)
 260         self.bt_Params_Apply.configure(activebackground="#ececec")
 261         self.bt_Params_Apply.configure(activeforeground="#000000")
 262         self.bt_Params_Apply.configure(background="#d9d9d9")
 263         self.bt_Params_Apply.configure(disabledforeground="#a3a3a3")
 264         self.bt_Params_Apply.configure(foreground="#000000")
 265         self.bt_Params_Apply.configure(highlightbackground="#d9d9d9")
 266         self.bt_Params_Apply.configure(highlightcolor="black")
 267         self.bt_Params_Apply.configure(pady="0")
 268         self.bt_Params_Apply.configure(text='''Anwenden''')
 269         self.bt_Params_Apply.configure(width=118)
 270 
 271         self.tf_OutDirectory = tk.Text(self.f_settings)
 272         self.tf_OutDirectory.place(relx=0.222, rely=0.4, relheight=0.091
 273                 , relwidth=0.589)
 274         self.tf_OutDirectory.configure(background="white")
 275         self.tf_OutDirectory.configure(font="TkTextFont")
 276         self.tf_OutDirectory.configure(foreground="black")
 277         self.tf_OutDirectory.configure(highlightbackground="#d9d9d9")
 278         self.tf_OutDirectory.configure(highlightcolor="black")
 279         self.tf_OutDirectory.configure(insertbackground="black")
 280         self.tf_OutDirectory.configure(selectbackground="#c4c4c4")
 281         self.tf_OutDirectory.configure(selectforeground="black")
 282         self.tf_OutDirectory.configure(width=424)
 283         self.tf_OutDirectory.configure(wrap="word")
 284 
 285         self.bt_OutDirectory = tk.Button(self.f_settings)
 286         self.bt_OutDirectory.place(relx=0.819, rely=0.4, height=42, width=122)
 287         self.bt_OutDirectory.configure(activebackground="#ececec")
 288         self.bt_OutDirectory.configure(activeforeground="#000000")
 289         self.bt_OutDirectory.configure(background="#d9d9d9")
 290         self.bt_OutDirectory.configure(disabledforeground="#a3a3a3")
 291         self.bt_OutDirectory.configure(foreground="#000000")
 292         self.bt_OutDirectory.configure(highlightbackground="#d9d9d9")
 293         self.bt_OutDirectory.configure(highlightcolor="black")
 294         self.bt_OutDirectory.configure(pady="0")
 295         self.bt_OutDirectory.configure(text='''Öffnen''')
 296 
 297         self.cb_Save_Datapoints = tk.Checkbutton(self.f_settings)
 298         self.cb_Save_Datapoints.place(relx=0.569, rely=0.027, relheight=0.099
 299                 , relwidth=0.274)
 300         self.cb_Save_Datapoints.configure(activebackground="#ececec")
 301         self.cb_Save_Datapoints.configure(activeforeground="#000000")
 302         self.cb_Save_Datapoints.configure(background="#d9d9d9")
 303         self.cb_Save_Datapoints.configure(disabledforeground="#a3a3a3")
 304         self.cb_Save_Datapoints.configure(foreground="#000000")
 305         self.cb_Save_Datapoints.configure(highlightbackground="#d9d9d9")
 306         self.cb_Save_Datapoints.configure(highlightcolor="black")
 307         self.cb_Save_Datapoints.configure(justify='left')
 308         self.cb_Save_Datapoints.configure(text='''Messdaten speichern''')
 309         self.cb_Save_Datapoints.configure(variable=etasys_prod_gui_support.che96)
 310 
 311         self.Scrolledtext1 = ScrolledText(top)
 312         self.Scrolledtext1.place(relx=0.0, rely=0.874, relheight=0.132
 313                 , relwidth=0.998)
 314         self.Scrolledtext1.configure(background="white")
 315         self.Scrolledtext1.configure(font="TkTextFont")
 316         self.Scrolledtext1.configure(foreground="black")
 317         self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
 318         self.Scrolledtext1.configure(highlightcolor="black")
 319         self.Scrolledtext1.configure(insertbackground="black")
 320         self.Scrolledtext1.configure(insertborderwidth="3")
 321         self.Scrolledtext1.configure(selectbackground="#c4c4c4")
 322         self.Scrolledtext1.configure(selectforeground="black")
 323         self.Scrolledtext1.configure(width=10)
 324         self.Scrolledtext1.configure(wrap="none")
 325 
 326         self.f_run = tk.Frame(top)
 327         self.f_run.place(relx=0.231, rely=0.681, relheight=0.17, relwidth=0.762)
 328         self.f_run.configure(relief='groove')
 329         self.f_run.configure(borderwidth="2")
 330         self.f_run.configure(relief="groove")
 331         self.f_run.configure(background="#d9d9d9")
 332         self.f_run.configure(width=725)
 333 
 334         self.bt_Start_Script = tk.Button(self.f_run)
 335         self.bt_Start_Script.place(relx=0.014, rely=0.087, height=42, width=118)
 336         self.bt_Start_Script.configure(activebackground="#ececec")
 337         self.bt_Start_Script.configure(activeforeground="#000000")
 338         self.bt_Start_Script.configure(background="#d9d9d9")
 339         self.bt_Start_Script.configure(disabledforeground="#a3a3a3")
 340         self.bt_Start_Script.configure(foreground="#000000")
 341         self.bt_Start_Script.configure(highlightbackground="#d9d9d9")
 342         self.bt_Start_Script.configure(highlightcolor="black")
 343         self.bt_Start_Script.configure(pady="0")
 344         self.bt_Start_Script.configure(text='''Prüfung''')
 345 
 346         self.bt_Export_Report = tk.Button(self.f_run)
 347         self.bt_Export_Report.place(relx=0.014, rely=0.522, height=42, width=118)
 348 
 349         self.bt_Export_Report.configure(activebackground="#ececec")
 350         self.bt_Export_Report.configure(activeforeground="#000000")
 351         self.bt_Export_Report.configure(background="#d9d9d9")
 352         self.bt_Export_Report.configure(disabledforeground="#a3a3a3")
 353         self.bt_Export_Report.configure(foreground="#000000")
 354         self.bt_Export_Report.configure(highlightbackground="#d9d9d9")
 355         self.bt_Export_Report.configure(highlightcolor="black")
 356         self.bt_Export_Report.configure(pady="0")
 357         self.bt_Export_Report.configure(text='''LaTeX''')
 358 
 359         self.pb_Progress = ttk.Progressbar(self.f_run)
 360         self.pb_Progress.place(relx=0.221, rely=0.174, relwidth=0.579
 361                 , relheight=0.0, height=22)
 362         self.pb_Progress.configure(length="420")
 363 
 364     @staticmethod
 365     def popup1(event, *args, **kwargs):
 366         Popupmenu1 = tk.Menu(root, tearoff=0)
 367         Popupmenu1.configure(activebackground="#f9f9f9")
 368         Popupmenu1.configure(activeborderwidth="1")
 369         Popupmenu1.configure(activeforeground="black")
 370         Popupmenu1.configure(background="#d9d9d9")
 371         Popupmenu1.configure(borderwidth="1")
 372         Popupmenu1.configure(disabledforeground="#a3a3a3")
 373         Popupmenu1.configure(font="{Segoe UI} 9")
 374         Popupmenu1.configure(foreground="black")
 375         Popupmenu1.post(event.x_root, event.y_root)
 376 
 377 # ======================================================
 378 # Modified by Rozen to remove Tkinter import statements and to receive
 379 # the font as an argument.
 380 # ======================================================
 381 # Found the original code at:
 382 # http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
 383 # ======================================================
 384 
 385 from time import time, localtime, strftime
 386 
 387 class ToolTip(tk.Toplevel):
 388     """
 389     Provides a ToolTip widget for Tkinter.
 390     To apply a ToolTip to any Tkinter widget, simply pass the widget to the
 391     ToolTip constructor
 392     """
 393     def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
 394                  delay=1, follow=True):
 395         """
 396         Initialize the ToolTip
 397 
 398         Arguments:
 399           wdgt: The widget this ToolTip is assigned to
 400           tooltip_font: Font to be used
 401           msg:  A static string message assigned to the ToolTip
 402           msgFunc: A function that retrieves a string to use as the ToolTip text
 403           delay:   The delay in seconds before the ToolTip appears(may be float)
 404           follow:  If True, the ToolTip follows motion, otherwise hides
 405         """
 406         self.wdgt = wdgt
 407         # The parent of the ToolTip is the parent of the ToolTips widget
 408         self.parent = self.wdgt.master
 409         # Initalise the Toplevel
 410         tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
 411         # Hide initially
 412         self.withdraw()
 413         # The ToolTip Toplevel should have no frame or title bar
 414         self.overrideredirect(True)
 415 
 416         # The msgVar will contain the text displayed by the ToolTip
 417         self.msgVar = tk.StringVar()
 418         if msg is None:
 419             self.msgVar.set('No message provided')
 420         else:
 421             self.msgVar.set(msg)
 422         self.msgFunc = msgFunc
 423         self.delay = delay
 424         self.follow = follow
 425         self.visible = 0
 426         self.lastMotion = 0
 427         # The text of the ToolTip is displayed in a Message widget
 428         tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
 429                 font=tooltip_font,
 430                 aspect=1000).grid()
 431 
 432         # Add bindings to the widget.  This will NOT override
 433         # bindings that the widget already has
 434         self.wdgt.bind('<Enter>', self.spawn, '+')
 435         self.wdgt.bind('<Leave>', self.hide, '+')
 436         self.wdgt.bind('<Motion>', self.move, '+')
 437 
 438     def spawn(self, event=None):
 439         """
 440         Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
 441         Usually this is caused by entering the widget
 442 
 443         Arguments:
 444           event: The event that called this funciton
 445         """
 446         self.visible = 1
 447         # The after function takes a time argument in miliseconds
 448         self.after(int(self.delay * 1000), self.show)
 449 
 450     def show(self):
 451         """
 452         Displays the ToolTip if the time delay has been long enough
 453         """
 454         if self.visible == 1 and time() - self.lastMotion > self.delay:
 455             self.visible = 2
 456         if self.visible == 2:
 457             self.deiconify()
 458 
 459     def move(self, event):
 460         """
 461         Processes motion within the widget.
 462         Arguments:
 463           event: The event that called this function
 464         """
 465         self.lastMotion = time()
 466         # If the follow flag is not set, motion within the
 467         # widget will make the ToolTip disappear
 468         #
 469         if self.follow is False:
 470             self.withdraw()
 471             self.visible = 1
 472 
 473         # Offset the ToolTip 10x10 pixes southwest of the pointer
 474         self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
 475         try:
 476             # Try to call the message function.  Will not change
 477             # the message if the message function is None or
 478             # the message function fails
 479             self.msgVar.set(self.msgFunc())
 480         except:
 481             pass
 482         self.after(int(self.delay * 1000), self.show)
 483 
 484     def hide(self, event=None):
 485         """
 486         Hides the ToolTip.  Usually this is caused by leaving the widget
 487         Arguments:
 488           event: The event that called this function
 489         """
 490         self.visible = 0
 491         self.withdraw()
 492 
 493 # ===========================================================
 494 #                   End of Class ToolTip
 495 # ===========================================================
 496 
 497 # The following code is added to facilitate the Scrolled widgets you specified.
 498 class AutoScroll(object):
 499     '''Configure the scrollbars for a widget.'''
 500 
 501     def __init__(self, master):
 502         #  Rozen. Added the try-except clauses so that this class
 503         #  could be used for scrolled entry widget for which vertical
 504         #  scrolling is not supported. 5/7/14.
 505         try:
 506             vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
 507         except:
 508             pass
 509         hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
 510 
 511         #self.configure(yscrollcommand=_autoscroll(vsb),
 512         #    xscrollcommand=_autoscroll(hsb))
 513         try:
 514             self.configure(yscrollcommand=self._autoscroll(vsb))
 515         except:
 516             pass
 517         self.configure(xscrollcommand=self._autoscroll(hsb))
 518 
 519         self.grid(column=0, row=0, sticky='nsew')
 520         try:
 521             vsb.grid(column=1, row=0, sticky='ns')
 522         except:
 523             pass
 524         hsb.grid(column=0, row=1, sticky='ew')
 525 
 526         master.grid_columnconfigure(0, weight=1)
 527         master.grid_rowconfigure(0, weight=1)
 528 
 529         # Copy geometry methods of master  (taken from ScrolledText.py)
 530         if py3:
 531             methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
 532                   | tk.Place.__dict__.keys()
 533         else:
 534             methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
 535                   + tk.Place.__dict__.keys()
 536 
 537         for meth in methods:
 538             if meth[0] != '_' and meth not in ('config', 'configure'):
 539                 setattr(self, meth, getattr(master, meth))
 540 
 541     @staticmethod
 542     def _autoscroll(sbar):
 543         '''Hide and show scrollbar as needed.'''
 544         def wrapped(first, last):
 545             first, last = float(first), float(last)
 546             if first <= 0 and last >= 1:
 547                 sbar.grid_remove()
 548             else:
 549                 sbar.grid()
 550             sbar.set(first, last)
 551         return wrapped
 552 
 553     def __str__(self):
 554         return str(self.master)
 555 
 556 def _create_container(func):
 557     '''Creates a ttk Frame with a given master, and use this new frame to
 558     place the scrollbars and the widget.'''
 559     def wrapped(cls, master, **kw):
 560         container = ttk.Frame(master)
 561         container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
 562         container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
 563         return func(cls, container, **kw)
 564     return wrapped
 565 
 566 class ScrolledText(AutoScroll, tk.Text):
 567     '''A standard Tkinter Text widget with scrollbars that will
 568     automatically show/hide as needed.'''
 569     @_create_container
 570     def __init__(self, master, **kw):
 571         tk.Text.__init__(self, master, **kw)
 572         AutoScroll.__init__(self, master)
 573 
 574 class ScrolledTreeView(AutoScroll, ttk.Treeview):
 575     '''A standard ttk Treeview widget with scrollbars that will
 576     automatically show/hide as needed.'''
 577     @_create_container
 578     def __init__(self, master, **kw):
 579         ttk.Treeview.__init__(self, master, **kw)
 580         AutoScroll.__init__(self, master)
 581 
 582 import platform
 583 def _bound_to_mousewheel(event, widget):
 584     child = widget.winfo_children()[0]
 585     if platform.system() == 'Windows' or platform.system() == 'Darwin':
 586         child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
 587         child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
 588     else:
 589         child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
 590         child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
 591         child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
 592         child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))
 593 
 594 def _unbound_to_mousewheel(event, widget):
 595     if platform.system() == 'Windows' or platform.system() == 'Darwin':
 596         widget.unbind_all('<MouseWheel>')
 597         widget.unbind_all('<Shift-MouseWheel>')
 598     else:
 599         widget.unbind_all('<Button-4>')
 600         widget.unbind_all('<Button-5>')
 601         widget.unbind_all('<Shift-Button-4>')
 602         widget.unbind_all('<Shift-Button-5>')
 603 
 604 def _on_mousewheel(event, widget):
 605     if platform.system() == 'Windows':
 606         widget.yview_scroll(-1*int(event.delta/120),'units')
 607     elif platform.system() == 'Darwin':
 608         widget.yview_scroll(-1*int(event.delta),'units')
 609     else:
 610         if event.num == 4:
 611             widget.yview_scroll(-1, 'units')
 612         elif event.num == 5:
 613             widget.yview_scroll(1, 'units')
 614 
 615 def _on_shiftmouse(event, widget):
 616     if platform.system() == 'Windows':
 617         widget.xview_scroll(-1*int(event.delta/120), 'units')
 618     elif platform.system() == 'Darwin':
 619         widget.xview_scroll(-1*int(event.delta), 'units')
 620     else:
 621         if event.num == 4:
 622             widget.xview_scroll(-1, 'units')
 623         elif event.num == 5:
 624             widget.xview_scroll(1, 'units')
 625 
 626 if __name__ == '__main__':
 627     vp_start_gui()
 628 
 629 

